# Textual TUI Development Guide

## Application Architecture

### Main App Structure
```python
"""Interactive transformer learning application built with Textual.

This application provides an educational TUI for learning transformer architecture,
attention mechanisms, and neural network concepts through interactive visualization
and hands-on experimentation.
"""
from __future__ import annotations

from dataclasses import dataclass
from pathlib import Path
from typing import Optional

from loguru import logger
from textual.app import App, ComposeResult
from textual.containers import Container, Horizontal, Vertical
from textual.screen import Screen
from textual.widgets import Header, Footer, Button, Static, DataTable

# =============================== Constants =================================== #
DEFAULT_CSS_PATH: str = "app.css"
DEFAULT_CONFIG_PATH: str = "config.json"

# =============================== Configuration =============================== #
# * Use Loguru for robust logging with file rotation and structured output.
logger.add(
    "logs/transformer_app_{time}.log",
    level="INFO",
    rotation="10 MB",
    retention="10 days",
    format="{time:YYYY-MM-DD HH:mm:ss.SSS} | {level: <8} | {name}:{function}:{line} - {message}",
)


# =============================== Data Structures ============================= #
@dataclass
class AppConfig:
    """Configuration for the transformer learning application."""

    css_path: str
    config_path: str
    log_level: str
    theme: str
    auto_save: bool


# ============================== Main Application ============================= #
class TransformerApp(App):
    """Main application for interactive transformer learning.

    This application provides a comprehensive TUI for learning transformer
    architecture through interactive components, real-time visualization,
    and hands-on experimentation.
    """

    CSS_PATH = DEFAULT_CSS_PATH
    BINDINGS = [
        ("d", "toggle_dark", "Toggle dark mode"),
        ("q", "quit", "Quit application"),
        ("1", "show_tutorials", "Tutorials"),
        ("2", "show_components", "Components"),
        ("3", "show_builder", "Model Builder"),
        ("4", "show_training", "Training"),
        ("5", "show_visualization", "Visualization"),
        ("h", "show_help", "Help"),
        ("s", "save_experiment", "Save Experiment"),
        ("l", "load_experiment", "Load Experiment"),
    ]

    def __init__(self, config_path: Optional[Path] = None) -> None:
        """Initialize the transformer learning application.

        Args:
            config_path: Path to configuration file. If None, uses default.

        Raises:
            FileNotFoundError: If configuration file is specified but not found.
            OSError: If application directories cannot be created.
        """
        super().__init__()
        self.config_path = config_path or Path(DEFAULT_CONFIG_PATH)
        self.app_config: Optional[AppConfig] = None

        try:
            self._load_configuration()
            self._setup_directories()
            logger.info("TransformerApp initialized successfully")
        except (FileNotFoundError, OSError) as exc:
            logger.error(f"Failed to initialize TransformerApp: {exc}")
            raise

    def _load_configuration(self) -> None:
        """Load application configuration from file.

        Raises:
            FileNotFoundError: If configuration file is not found.
            ValueError: If configuration file is malformed.
        """
        if self.config_path.exists():
            try:
                # TODO: Implement configuration loading logic
                self.app_config = AppConfig(
                    css_path=DEFAULT_CSS_PATH,
                    config_path=str(self.config_path),
                    log_level="INFO",
                    theme="dark",
                    auto_save=True,
                )
                logger.info(f"Configuration loaded from {self.config_path}")
            except Exception as exc:
                logger.error(f"Failed to load configuration: {exc}")
                raise ValueError(f"Malformed configuration file: {exc}")
        else:
            # * Use default configuration if file doesn't exist
            self.app_config = AppConfig(
                css_path=DEFAULT_CSS_PATH,
                config_path=str(self.config_path),
                log_level="INFO",
                theme="dark",
                auto_save=True,
            )
            logger.info("Using default configuration")

    def _setup_directories(self) -> None:
        """Create necessary application directories.

        Raises:
            OSError: If directories cannot be created.
        """
        try:
            Path("logs").mkdir(exist_ok=True)
            Path("experiments").mkdir(exist_ok=True)
            Path("data").mkdir(exist_ok=True)
            logger.info("Application directories created successfully")
        except OSError as exc:
            logger.error(f"Failed to create application directories: {exc}")
            raise

    def compose(self) -> ComposeResult:
        """Compose the main application layout.

        Returns:
            ComposeResult: The composed application widgets.

        Raises:
            RuntimeError: If screen composition fails.
        """
        try:
            yield Header()
            yield MainScreen()
            yield Footer()
            logger.debug("Application layout composed successfully")
        except Exception as exc:
            logger.error(f"Failed to compose application layout: {exc}")
            raise RuntimeError(f"Screen composition failed: {exc}")

    def on_mount(self) -> None:
        """Handle application mounting.

        This method is called when the application is first mounted.
        """
        logger.info("TransformerApp mounted successfully")
        self.title = "Transformer Learning TUI"
        self.sub_title = "Interactive Learning Environment"

    def action_toggle_dark(self) -> None:
        """Toggle between light and dark themes."""
        self.dark = not self.dark
        logger.info(f"Theme toggled to {'dark' if self.dark else 'light'}")

    def action_show_tutorials(self) -> None:
        """Navigate to tutorials screen."""
        self.push_screen(TutorialScreen())
        logger.info("Navigated to tutorials screen")

    def action_show_components(self) -> None:
        """Navigate to components screen."""
        self.push_screen(ComponentLibraryScreen())
        logger.info("Navigated to components screen")

    def action_show_builder(self) -> None:
        """Navigate to model builder screen."""
        self.push_screen(ModelBuilderScreen())
        logger.info("Navigated to model builder screen")

    def action_show_training(self) -> None:
        """Navigate to training screen."""
        self.push_screen(TrainingScreen())
        logger.info("Navigated to training screen")

    def action_show_visualization(self) -> None:
        """Navigate to visualization screen."""
        self.push_screen(VisualizationScreen())
        logger.info("Navigated to visualization screen")

    def action_show_help(self) -> None:
        """Navigate to help screen."""
        self.push_screen(HelpScreen())
        logger.info("Navigated to help screen")

    def action_save_experiment(self) -> None:
        """Save current experiment state."""
        # TODO: Implement experiment saving logic
        logger.info("Experiment save requested")

    def action_load_experiment(self) -> None:
        """Load experiment from file."""
        # TODO: Implement experiment loading logic
        logger.info("Experiment load requested")
```

### Screen Organization
```python
class MainScreen(Screen):
    """Main navigation screen with learning modules.

    This screen provides the primary interface for navigating between
    different learning modules and accessing key features of the
    transformer learning application.
    """

    def __init__(self) -> None:
        """Initialize the main screen."""
        super().__init__()
        self.current_module: str = "welcome"
        self.user_progress: dict[str, float] = {}

    def compose(self) -> ComposeResult:
        """Compose the main screen layout.

        Returns:
            ComposeResult: The composed screen widgets.

        Raises:
            RuntimeError: If screen composition fails.
        """
        try:
            yield Container(
                Horizontal(
                    NavigationPanel(),
                    Vertical(
                        WelcomePanel(),
                        LearningProgressPanel(),
                        QuickActionsPanel(),
                    ),
                ),
                id="main-layout"
            )
            logger.debug("MainScreen layout composed successfully")
        except Exception as exc:
            logger.error(f"Failed to compose MainScreen layout: {exc}")
            raise RuntimeError(f"MainScreen composition failed: {exc}")

    def on_mount(self) -> None:
        """Handle screen mounting.

        This method is called when the screen is first mounted.
        """
        logger.info("MainScreen mounted successfully")
        self._load_user_progress()

    def _load_user_progress(self) -> None:
        """Load user progress from storage.

        Raises:
            FileNotFoundError: If progress file is not found.
            ValueError: If progress file is malformed.
        """
        try:
            progress_path = Path("data/user_progress.json")
            if progress_path.exists():
                # TODO: Implement progress loading logic
                self.user_progress = {"welcome": 1.0, "attention": 0.5}
                logger.info("User progress loaded successfully")
            else:
                self.user_progress = {"welcome": 0.0}
                logger.info("Starting with fresh user progress")
        except Exception as exc:
            logger.error(f"Failed to load user progress: {exc}")
            self.user_progress = {"welcome": 0.0}
```

## Core Screens

### 1. Navigation Dashboard
- Learning modules overview
- Progress tracking
- Quick access to components
- Recent experiments

### 2. Component Library
- Interactive transformer components
- Live code editor
- Real-time visualization
- Component testing interface

### 3. Tutorial System
- Step-by-step guided learning
- Interactive examples
- Progress tracking
- Quiz and assessment

### 4. Model Builder
- Drag-and-drop component assembly
- Parameter configuration
- Model validation
- Export capabilities

### 5. Training Interface
- Real-time training visualization
- Loss and metric plots
- Model performance monitoring
- Training controls

### 6. Visualization Panels
- Attention weight heatmaps
- Model architecture diagrams
- Training progress charts
- Component interaction graphs

## Widget Components

### Attention Visualization Widget
```python
class AttentionWidget(Widget):
    """Interactive attention weight visualization."""

    def __init__(self, attention_weights: torch.Tensor):
        super().__init__()
        self.attention_weights = attention_weights
        self.selected_head = 0
        self.selected_position = 0

    def on_mount(self) -> None:
        """Initialize the widget after mounting."""
        self.update_visualization()

    def update_visualization(self) -> None:
        """Update the attention visualization."""
        # Implementation for attention heatmap
        pass
```

### Model Architecture Widget
```python
class ModelArchitectureWidget(Widget):
    """Interactive model architecture diagram."""

    def __init__(self, model_config: ModelConfig):
        super().__init__()
        self.model_config = model_config
        self.selected_layer = 0

    def on_mount(self) -> None:
        """Initialize the widget after mounting."""
        self.draw_architecture()

    def draw_architecture(self) -> None:
        """Draw the model architecture diagram."""
        # Implementation for architecture visualization
        pass
```

### Training Progress Widget
```python
class TrainingProgressWidget(Widget):
    """Real-time training progress visualization."""

    def __init__(self):
        super().__init__()
        self.loss_history = []
        self.accuracy_history = []
        self.current_epoch = 0

    def update_progress(self, loss: float, accuracy: float) -> None:
        """Update training progress."""
        self.loss_history.append(loss)
        self.accuracy_history.append(accuracy)
        self.refresh()
```

## Interactive Features

### 1. Live Code Editing
- Syntax highlighting for Python
- Real-time code execution
- Error highlighting and suggestions
- Code completion

### 2. Component Testing
- Interactive parameter adjustment
- Real-time model evaluation
- Performance metrics display
- Comparison tools

### 3. Data Visualization
- Attention weight heatmaps
- Training loss curves
- Model architecture diagrams
- Component interaction graphs

### 4. Progress Tracking
- Learning module completion
- Achievement system
- Skill assessment
- Progress export

## Event Handling

### Key Bindings
```python
BINDINGS = [
    ("1", "show_tutorials", "Tutorials"),
    ("2", "show_components", "Components"),
    ("3", "show_builder", "Model Builder"),
    ("4", "show_training", "Training"),
    ("5", "show_visualization", "Visualization"),
    ("h", "show_help", "Help"),
    ("s", "save_experiment", "Save Experiment"),
    ("l", "load_experiment", "Load Experiment"),
]
```

### Event Handlers
```python
def on_button_pressed(self, event: Button.Pressed) -> None:
    """Handle button press events."""
    button_id = event.button.id
    if button_id == "start_tutorial":
        self.push_screen(TutorialScreen())
    elif button_id == "build_model":
        self.push_screen(ModelBuilderScreen())

def on_screen_resume(self, event: Screen.Resume) -> None:
    """Handle screen resume events."""
    if isinstance(event.screen, TrainingScreen):
        self.update_training_status()
```

## Styling and Themes

### CSS Styling
```css
/* Main application styling */
TransformerApp {
    background: $surface;
}

/* Screen-specific styling */
MainScreen {
    layout: horizontal;
}

/* Widget styling */
AttentionWidget {
    height: 20;
    border: solid green;
}

TrainingProgressWidget {
    height: 15;
    border: solid blue;
}
```

### Theme Support
- Light and dark mode
- High contrast mode
- Custom color schemes
- Accessibility features

## Data Management

### Experiment Storage
```python
@dataclass
class Experiment:
    """Represents a saved experiment."""
    name: str
    timestamp: datetime
    model_config: ModelConfig
    training_config: TrainingConfig
    results: Dict[str, Any]
    notes: str
```

### Progress Tracking
```python
@dataclass
class LearningProgress:
    """Tracks user learning progress."""
    completed_modules: Set[str]
    current_module: str
    achievements: List[Achievement]
    assessment_scores: Dict[str, float]
```

## Integration with Transformer Components

### Real-time Model Updates
- Live parameter adjustment
- Instant model recompilation
- Real-time performance metrics
- Interactive debugging

### Visualization Integration
- Attention weight display
- Gradient flow visualization
- Model architecture diagrams
- Training progress charts

### Export Capabilities
- Model configuration export
- Training results export
- Visualization export
- Progress report generation
description:
globs:
alwaysApply: false
---
