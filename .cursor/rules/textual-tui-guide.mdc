# Textual TUI Development Guide

## Application Architecture

### Main App Structure
```python
from textual.app import App, ComposeResult
from textual.containers import Container, Horizontal, Vertical
from textual.widgets import Header, Footer, Button, Static, DataTable
from textual.screen import Screen

class TransformerApp(App):
    """Main application for interactive transformer learning."""

    CSS_PATH = "app.css"
    BINDINGS = [
        ("d", "toggle_dark", "Toggle dark mode"),
        ("q", "quit", "Quit application"),
    ]

    def compose(self) -> ComposeResult:
        """Compose the main application layout."""
        yield Header()
        yield MainScreen()
        yield Footer()
```

### Screen Organization
```python
class MainScreen(Screen):
    """Main navigation screen with learning modules."""

    def compose(self) -> ComposeResult:
        yield Container(
            Horizontal(
                NavigationPanel(),
                Vertical(
                    WelcomePanel(),
                    LearningProgressPanel(),
                    QuickActionsPanel(),
                ),
            ),
            id="main-layout"
        )
```

## Core Screens

### 1. Navigation Dashboard
- Learning modules overview
- Progress tracking
- Quick access to components
- Recent experiments

### 2. Component Library
- Interactive transformer components
- Live code editor
- Real-time visualization
- Component testing interface

### 3. Tutorial System
- Step-by-step guided learning
- Interactive examples
- Progress tracking
- Quiz and assessment

### 4. Model Builder
- Drag-and-drop component assembly
- Parameter configuration
- Model validation
- Export capabilities

### 5. Training Interface
- Real-time training visualization
- Loss and metric plots
- Model performance monitoring
- Training controls

### 6. Visualization Panels
- Attention weight heatmaps
- Model architecture diagrams
- Training progress charts
- Component interaction graphs

## Widget Components

### Attention Visualization Widget
```python
class AttentionWidget(Widget):
    """Interactive attention weight visualization."""

    def __init__(self, attention_weights: torch.Tensor):
        super().__init__()
        self.attention_weights = attention_weights
        self.selected_head = 0
        self.selected_position = 0

    def on_mount(self) -> None:
        """Initialize the widget after mounting."""
        self.update_visualization()

    def update_visualization(self) -> None:
        """Update the attention visualization."""
        # Implementation for attention heatmap
        pass
```

### Model Architecture Widget
```python
class ModelArchitectureWidget(Widget):
    """Interactive model architecture diagram."""

    def __init__(self, model_config: ModelConfig):
        super().__init__()
        self.model_config = model_config
        self.selected_layer = 0

    def on_mount(self) -> None:
        """Initialize the widget after mounting."""
        self.draw_architecture()

    def draw_architecture(self) -> None:
        """Draw the model architecture diagram."""
        # Implementation for architecture visualization
        pass
```

### Training Progress Widget
```python
class TrainingProgressWidget(Widget):
    """Real-time training progress visualization."""

    def __init__(self):
        super().__init__()
        self.loss_history = []
        self.accuracy_history = []
        self.current_epoch = 0

    def update_progress(self, loss: float, accuracy: float) -> None:
        """Update training progress."""
        self.loss_history.append(loss)
        self.accuracy_history.append(accuracy)
        self.refresh()
```

## Interactive Features

### 1. Live Code Editing
- Syntax highlighting for Python
- Real-time code execution
- Error highlighting and suggestions
- Code completion

### 2. Component Testing
- Interactive parameter adjustment
- Real-time model evaluation
- Performance metrics display
- Comparison tools

### 3. Data Visualization
- Attention weight heatmaps
- Training loss curves
- Model architecture diagrams
- Component interaction graphs

### 4. Progress Tracking
- Learning module completion
- Achievement system
- Skill assessment
- Progress export

## Event Handling

### Key Bindings
```python
BINDINGS = [
    ("1", "show_tutorials", "Tutorials"),
    ("2", "show_components", "Components"),
    ("3", "show_builder", "Model Builder"),
    ("4", "show_training", "Training"),
    ("5", "show_visualization", "Visualization"),
    ("h", "show_help", "Help"),
    ("s", "save_experiment", "Save Experiment"),
    ("l", "load_experiment", "Load Experiment"),
]
```

### Event Handlers
```python
def on_button_pressed(self, event: Button.Pressed) -> None:
    """Handle button press events."""
    button_id = event.button.id
    if button_id == "start_tutorial":
        self.push_screen(TutorialScreen())
    elif button_id == "build_model":
        self.push_screen(ModelBuilderScreen())

def on_screen_resume(self, event: Screen.Resume) -> None:
    """Handle screen resume events."""
    if isinstance(event.screen, TrainingScreen):
        self.update_training_status()
```

## Styling and Themes

### CSS Styling
```css
/* Main application styling */
TransformerApp {
    background: $surface;
}

/* Screen-specific styling */
MainScreen {
    layout: horizontal;
}

/* Widget styling */
AttentionWidget {
    height: 20;
    border: solid green;
}

TrainingProgressWidget {
    height: 15;
    border: solid blue;
}
```

### Theme Support
- Light and dark mode
- High contrast mode
- Custom color schemes
- Accessibility features

## Data Management

### Experiment Storage
```python
@dataclass
class Experiment:
    """Represents a saved experiment."""
    name: str
    timestamp: datetime
    model_config: ModelConfig
    training_config: TrainingConfig
    results: Dict[str, Any]
    notes: str
```

### Progress Tracking
```python
@dataclass
class LearningProgress:
    """Tracks user learning progress."""
    completed_modules: Set[str]
    current_module: str
    achievements: List[Achievement]
    assessment_scores: Dict[str, float]
```

## Integration with Transformer Components

### Real-time Model Updates
- Live parameter adjustment
- Instant model recompilation
- Real-time performance metrics
- Interactive debugging

### Visualization Integration
- Attention weight display
- Gradient flow visualization
- Model architecture diagrams
- Training progress charts

### Export Capabilities
- Model configuration export
- Training results export
- Visualization export
- Progress report generation
description:
globs:
alwaysApply: false
---
